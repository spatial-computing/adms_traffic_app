//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
// 
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Threading;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;
using Parsers.Properties;

#pragma warning disable 1591

namespace Parsers.CongestionService1
{
    /// <remarks/>
    [GeneratedCode("System.Web.Services", "4.0.30319.1")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [WebServiceBinding(Name = "IAI_CongestionServiceSoapBinding",
        Namespace = "http://rtsiai01.riits.net/IAI/services/IAI_CongestionService")]
    public class CongestionServiceService : SoapHttpClientProtocol
    {
        private SendOrPostCallback getTrafficInfoOperationCompleted;
        private SendOrPostCallback initializeOperationCompleted;

        private SendOrPostCallback refreshUsersOperationCompleted;

        private bool useDefaultCredentialsSetExplicitly;

        /// <remarks/>
        public CongestionServiceService()
        {
            Url = Settings.Default.Parsers_CongestionService1_CongestionServiceService;
            if (IsLocalFileSystemWebService(Url))
            {
                UseDefaultCredentials = true;
                useDefaultCredentialsSetExplicitly = false;
            }
            else
            {
                useDefaultCredentialsSetExplicitly = true;
            }
        }

        public new string Url
        {
            get { return base.Url; }
            set
            {
                if (((IsLocalFileSystemWebService(base.Url)
                      && (useDefaultCredentialsSetExplicitly == false))
                     && (IsLocalFileSystemWebService(value) == false)))
                {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }

        public new bool UseDefaultCredentials
        {
            get { return base.UseDefaultCredentials; }
            set
            {
                base.UseDefaultCredentials = value;
                useDefaultCredentialsSetExplicitly = true;
            }
        }

        /// <remarks/>
        public event initializeCompletedEventHandler initializeCompleted;

        /// <remarks/>
        public event getTrafficInfoCompletedEventHandler getTrafficInfoCompleted;

        /// <remarks/>
        public event refreshUsersCompletedEventHandler refreshUsersCompleted;

        /// <remarks/>
        [SoapRpcMethod("", RequestNamespace = "http://external.regional.services.nateng.com",
            ResponseNamespace = "http://rtsiai01.riits.net/IAI/services/IAI_CongestionService")]
        public void initialize(string agencyName, string serviceName, string configFile)
        {
            Invoke("initialize", new object[]
                                     {
                                         agencyName,
                                         serviceName,
                                         configFile
                                     });
        }

        /// <remarks/>
        public void initializeAsync(string agencyName, string serviceName, string configFile)
        {
            initializeAsync(agencyName, serviceName, configFile, null);
        }

        /// <remarks/>
        public void initializeAsync(string agencyName, string serviceName, string configFile, object userState)
        {
            if ((initializeOperationCompleted == null))
            {
                initializeOperationCompleted = new SendOrPostCallback(OninitializeOperationCompleted);
            }
            InvokeAsync("initialize", new object[]
                                          {
                                              agencyName,
                                              serviceName,
                                              configFile
                                          }, initializeOperationCompleted, userState);
        }

        private void OninitializeOperationCompleted(object arg)
        {
            if ((initializeCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                initializeCompleted(this,
                                    new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapRpcMethod("", RequestNamespace = "http://external.regional.services.nateng.com",
            ResponseNamespace = "http://rtsiai01.riits.net/IAI/services/IAI_CongestionService")]
        [return: SoapElement("getTrafficInfoReturn")]
        public string getTrafficInfo(string userName, string userPass, string xmlMessageRequest)
        {
            object[] results = Invoke("getTrafficInfo", new object[]
                                                            {
                                                                userName,
                                                                userPass,
                                                                xmlMessageRequest
                                                            });
            return ((string) (results[0]));
        }

        /// <remarks/>
        public void getTrafficInfoAsync(string userName, string userPass, string xmlMessageRequest)
        {
            getTrafficInfoAsync(userName, userPass, xmlMessageRequest, null);
        }

        /// <remarks/>
        public void getTrafficInfoAsync(string userName, string userPass, string xmlMessageRequest, object userState)
        {
            if ((getTrafficInfoOperationCompleted == null))
            {
                getTrafficInfoOperationCompleted = new SendOrPostCallback(OngetTrafficInfoOperationCompleted);
            }
            InvokeAsync("getTrafficInfo", new object[]
                                              {
                                                  userName,
                                                  userPass,
                                                  xmlMessageRequest
                                              }, getTrafficInfoOperationCompleted, userState);
        }

        private void OngetTrafficInfoOperationCompleted(object arg)
        {
            if ((getTrafficInfoCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                getTrafficInfoCompleted(this,
                                        new getTrafficInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                             invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapRpcMethod("", RequestNamespace = "http://services.nateng.com",
            ResponseNamespace = "http://rtsiai01.riits.net/IAI/services/IAI_CongestionService")]
        public void refreshUsers(string usr, string pwd, string agency)
        {
            Invoke("refreshUsers", new object[]
                                       {
                                           usr,
                                           pwd,
                                           agency
                                       });
        }

        /// <remarks/>
        public void refreshUsersAsync(string usr, string pwd, string agency)
        {
            refreshUsersAsync(usr, pwd, agency, null);
        }

        /// <remarks/>
        public void refreshUsersAsync(string usr, string pwd, string agency, object userState)
        {
            if ((refreshUsersOperationCompleted == null))
            {
                refreshUsersOperationCompleted = new SendOrPostCallback(OnrefreshUsersOperationCompleted);
            }
            InvokeAsync("refreshUsers", new object[]
                                            {
                                                usr,
                                                pwd,
                                                agency
                                            }, refreshUsersOperationCompleted, userState);
        }

        private void OnrefreshUsersOperationCompleted(object arg)
        {
            if ((refreshUsersCompleted != null))
            {
                var invokeArgs = ((InvokeCompletedEventArgs) (arg));
                refreshUsersCompleted(this,
                                      new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                  invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }

        private bool IsLocalFileSystemWebService(string url)
        {
            if (((url == null)
                 || (url == string.Empty)))
            {
                return false;
            }
            var wsUri = new Uri(url);
            if (((wsUri.Port >= 1024)
                 && (string.Compare(wsUri.Host, "localHost", StringComparison.OrdinalIgnoreCase) == 0)))
            {
                return true;
            }
            return false;
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "4.0.30319.1")]
    public delegate void initializeCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "4.0.30319.1")]
    public delegate void getTrafficInfoCompletedEventHandler(object sender, getTrafficInfoCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "4.0.30319.1")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class getTrafficInfoCompletedEventArgs : AsyncCompletedEventArgs
    {
        private readonly object[] results;

        internal getTrafficInfoCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                  object userState) :
                                                      base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "4.0.30319.1")]
    public delegate void refreshUsersCompletedEventHandler(object sender, AsyncCompletedEventArgs e);
}

#pragma warning restore 1591