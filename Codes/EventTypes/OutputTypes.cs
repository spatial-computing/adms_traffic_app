/**
 * Created by Seyed Kazemitabar (kazemita@usc.edu) 
 * at Integrated Media Systems Center (IMSC), University of Southern California.
 * Date: 03/22/2011
 */

/**
 * Updated by Bei(Penny) Pan (beipan@usc.edu) 
 * Purpose: Add output elements for Bus, Rail, Ramp, Traveltime
 * at Integrated Media Systems Center (IMSC), University of Southern California.
 * Date: 04/18/2011
 */

/**
 * Updated by Seyed Kazemitabar (kazemita@usc.edu) 
 * at Integrated Media Systems Center (IMSC), University of Southern California.
 * Added Event type 
 * Date: 06/09/2011
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.ComplexEventProcessing;
using Microsoft.WindowsAzure.StorageClient;
using System.Globalization;

namespace OutputTypes
{
    public interface IOutputType
    {
        void Initialize(PointEvent ev);
    }

    public class SensorSpeedOutputElement: IOutputType
    {
        public int Hovspeed;
        public String Link_Status;
        public int Occupancy;
        public string SensorId;
        public int Speed;
        public int Volume;
        public DateTimeOffset StartTime;
        // Config id is generated by us and is not part of the input data.
        public int ConfigId;
        

        //public SensorSpeedOutputElement(int sensId, double spd, DateTimeOffset startTime)
        //{
        //    SensorId = sensId;
        //    Speed = (int)spd;
        //    StartTime = startTime;
        //}
        public SensorSpeedOutputElement()
        {
        }

        public void Initialize(PointEvent ev)
        {
            Hovspeed = (int) ev.GetField(0);
            Link_Status= (String) ev.GetField(1);
            Occupancy = (int) ev.GetField(2);
            SensorId= (String)ev.GetField(3);
            Speed = (int) ev.GetField(4);
            Volume = (int) ev.GetField(5);
            //todo : update configid
            StartTime = ev.StartTime.LocalDateTime;
        }
    }

    public class ArterialSensorSpeedOutputElement : SensorSpeedOutputElement
    {
        
    }

    public class FreewaySensorSpeedOutputElement : SensorSpeedOutputElement
    {
        
    }

    public class BusGPSOutputElement : IOutputType
    {
        public int busId;
        public int lineId;
        public int runId;
        public int routeId;
        public String routeDes;
        public int direction;
        public String Longitude;
        public String Latitude;
        public String Location_time;
        public int scheduled_dev;
        public int arrival_nextTP;
        public String next_location;
        public int timepoint;
        public String brtFlag;

        public DateTimeOffset StartTime;
        // Config id is generated by us and is not part of the input data.
        public int ConfigId;

        public BusGPSOutputElement()
        {
        }


        public void Initialize(PointEvent ev)
        {
            StartTime = ev.StartTime.LocalDateTime;
            int[] index = { 6, 8, 12, 11, 10, 7, 3, 1, 2, 13, 4, 9, 14, 5 };


            busId = (int)ev.GetField(index[0] - 1);
            lineId = (int)ev.GetField(index[1] - 1);
            runId = (int)ev.GetField(index[2] - 1);
            routeId = (int)ev.GetField(index[3] - 1);
            routeDes = (String)ev.GetField(index[4] - 1);
            direction = (int)ev.GetField(index[5] - 1);
            Longitude = (String)ev.GetField(index[6] - 1);
            Latitude = (String)ev.GetField(index[7] - 1);
            Location_time = (String)ev.GetField(index[8] - 1);
            scheduled_dev = (int)ev.GetField(index[9] - 1);
            arrival_nextTP = (int)ev.GetField(index[10] - 1);
            next_location = (String)ev.GetField(index[11] - 1);
            timepoint = (int)ev.GetField(index[12] - 1);
            brtFlag = (String) ev.GetField(index[13] - 1);
        }
    }

    public class RailGPSOutputElement : IOutputType
    {
        public int trainId;
        public String lineId;
        public String routeId;
        public String routeDes;
        public String destination;
        public string offRoute;
        public int direction;
        public String Longitude;
        public String Latitude;
        public String Location_time;
        public int scheduled_dev;
        public int arrival_nextTP;
        public String next_location;
        public int timepoint;

        public DateTimeOffset StartTime;
        // Config id is generated by us and is not part of the input data.
        public int ConfigId;

        public RailGPSOutputElement()
        {
        }


        public void Initialize(PointEvent ev)
        {
            StartTime = ev.StartTime.LocalDateTime;
            int[] index = { 14, 7, 11, 10, 5, 9, 6, 3, 1, 2, 12, 4, 8, 13 };

            trainId = (int)ev.GetField(index[0] - 1);
            lineId = (String)ev.GetField(index[1] - 1);
            routeId = (String)ev.GetField(index[2] - 1);
            routeDes = (String)ev.GetField(index[3] - 1);
            destination = (String)ev.GetField(index[4] - 1);
            offRoute = (String)ev.GetField(index[5] - 1);
            direction = (int)ev.GetField(index[6] - 1);
            Longitude = (String)ev.GetField(index[7] - 1);
            Latitude = (String)ev.GetField(index[8] - 1);
            Location_time = (String)ev.GetField(index[9] - 1);
            scheduled_dev = (int)ev.GetField(index[10] - 1);
            arrival_nextTP = (int)ev.GetField(index[11] - 1);
            next_location = (String)ev.GetField(index[12] - 1);
            timepoint = (int)ev.GetField(index[13] - 1);
        }

    }

    public class TravelLinksOutputElement : IOutputType
    {
        public int travelId;
        public double speed;
        public double travelTime;

        public DateTimeOffset StartTime;
        // Config id is generated by us and is not part of the input data.
        public int ConfigId;

        public TravelLinksOutputElement()
        {
        }


        public void Initialize(PointEvent ev)
        {
            StartTime = ev.StartTime.LocalDateTime;

            travelId = (int)ev.GetField(1);
            speed = (double)ev.GetField(0);
            travelTime = (double)ev.GetField(2);

        }

    }

    public class RampOutputElement : IOutputType
    {
        public int rampId;
        public int MSId;
        public int device_status;
        public int meter_status;
        public int ramp_meter_control_type;
        public int meter_rate;
        public int Occupancy;
        public int Speed;
        public int Volume;
        public string link_ids;
        public string dector_types;
        public string occupancies;
        public string speeds;
        public string volumes;
        public string link_statuses;

        public DateTimeOffset StartTime;
        // Config id is generated by us and is not part of the input data.
        public int ConfigId;

        public RampOutputElement()
        {
        }


        public void Initialize(PointEvent ev)
        {
            StartTime = ev.StartTime.LocalDateTime;

            int[] index = { 12, 1, 6, 10, 13, 9, 2, 3, 4, 7, 5, 11, 14, 15, 8 };

            rampId = (int)ev.GetField(index[0] - 1);
            MSId = (int)ev.GetField(index[1] - 1);
            device_status = (int)ev.GetField(index[2] - 1);
            meter_status = (int)ev.GetField(index[3] - 1);
            ramp_meter_control_type = (int)ev.GetField(index[4] - 1);
            meter_rate = (int)ev.GetField(index[5] - 1);
            Occupancy = (int)ev.GetField(index[6] - 1);
            Speed = (int)ev.GetField(index[7] - 1);
            Volume = (int)ev.GetField(index[8] - 1);
            link_ids = (String)ev.GetField(index[9] - 1);
            dector_types = (String)ev.GetField(index[10] - 1);
            occupancies = (String)ev.GetField(index[11] - 1);
            speeds = (String)ev.GetField(index[12] - 1);
            volumes = (String)ev.GetField(index[13] - 1);
            link_statuses = (String)ev.GetField(index[14] - 1);

        }

    }


    public class EventOutputElement:IOutputType
    {
         private const string DELIMITER = "-";

         public int EventId { get; set; }
        public string Agency { get; set; }
        public string OnStreet { get; set; }
        public string FromStreet { get; set; }
        public string ToStreet { get; set; }
        public double Latitude { get; set; }
        public double Longitude { get; set; }
        public int Direction { get; set; }
        public string AdminCity { get; set; }
        public double AdminPostmile { get; set; }
        public int TypeEvent { get; set; }
        public int Severity { get; set; }
        public string Description { get; set; }
        public int AffectedLaneCnt { get; set; }
        public int AffectedLaneType { get; set; }
        public int VecType9220 { get; set; }
        public int VecType9227 { get; set; }
        public int VecType9228 { get; set; }
        public int VecType9290 { get; set; }
        public int FatalityCnt { get; set; }
        public int PossibleInjCnt { get; set; }
        private DateTime evStartTime { get; set; }
        public long iStartTime { get; set; }
        private DateTime evClearTime { get; set; }
        public long iClearTime { get; set; }
        public string IssuingUser { get; set; }
        public string ContactName { get; set; }
        public string ContactPhone { get; set; }
        public bool HighwayPatrol { get; set; }
        public bool CountyFire { get; set; }
        public bool CountySheriff { get; set; }
        public bool FireDepartment { get; set; }
        public bool Ambulance { get; set; }
        public bool Coroner { get; set; }
        public bool Mait { get; set; }
        public bool Hazmat { get; set; }
        public bool FreewayServicePatrol { get; set; }
        public bool CaltransMaintenance { get; set; }
        public bool CaltransTMT { get; set; }
        public bool CountySheriffTSB { get; set; }
        public bool Other { get; set; }
        public string OtherText { get; set; }
        public string CommentInternalContent { get; set; }
        public string CommentInternalText { get; set; }
        public string CommentExternalContent { get; set; }
        public string CommentExternalText { get; set; }
        private  DateTime ActualStartTime { get; set; }
        public long iActualStartTime { get; set; }
        private DateTime ActualEndTime { get; set; }
        public long iActualEndTime { get; set; }
        public int EventStatus { get; set; }

        private DateTime datetime;
        public long iDateTime;
       
       // public int ConfigId;

        //public EventOutputElement()
        //{
        //}


        public void Initialize(PointEvent ev)
        {
            datetime = ev.StartTime.LocalDateTime; // this is what we know as event start time for all event types (e.g. highway or arterial events or rail events)
            iDateTime = Int64.Parse(datetime.ToString("yyyyMMddHHmmss"));
            // there are also a couple of datetime fields in "event" events.
            ActualEndTime = (DateTime)ev.GetField(0);
            iActualEndTime = Int64.Parse(ActualEndTime.ToString("yyyyMMddHHmmss"));
            ActualStartTime = (DateTime)ev.GetField(1);
            iActualStartTime = Int64.Parse(ActualStartTime.ToString("yyyyMMddHHmmss"));
            AdminCity = (string)ev.GetField(2);
            AdminPostmile = (double)ev.GetField(3);
            AffectedLaneCnt = (int)ev.GetField(4);
            AffectedLaneType = (int)ev.GetField(5);
            Agency = (string)ev.GetField(6);
            Ambulance = (bool)ev.GetField(7);
            CaltransMaintenance = (bool)ev.GetField(8);
            CaltransTMT = (bool)ev.GetField(9);
            evClearTime = (DateTime)ev.GetField(10);
            iClearTime = Int64.Parse(evClearTime.ToString("yyyyMMddHHmmss"));
            CommentExternalContent = (string)ev.GetField(11);
            CommentExternalText = (string)ev.GetField(12);
            CommentInternalContent = (string)ev.GetField(13);
            CommentInternalText = (string)ev.GetField(14);
            ContactName = (string)ev.GetField(15);
            ContactPhone = (string)ev.GetField(16);
            Coroner = (bool)ev.GetField(17);
            CountyFire = (bool)ev.GetField(18);
            CountySheriff = (bool)ev.GetField(19);
            CountySheriffTSB = (bool)ev.GetField(20);
            Description = (string)ev.GetField(21);
            Direction = (int)ev.GetField(22);
            EventId = (int)ev.GetField(23);
            EventStatus = (int)ev.GetField(24);
            FatalityCnt = (int)ev.GetField(25);
            FireDepartment = (bool)ev.GetField(26);
            FreewayServicePatrol = (bool)ev.GetField(27);
            FromStreet = (string)ev.GetField(28);
            Hazmat = (bool)ev.GetField(29);
            HighwayPatrol = (bool)ev.GetField(30);
            IssuingUser = (string)ev.GetField(31);
            Latitude = (double)ev.GetField(32);
            Longitude = (double)ev.GetField(33);
            Mait = (bool)ev.GetField(34);
            OnStreet = (string)ev.GetField(35);
            Other = (bool)ev.GetField(36);
            OtherText = (string)ev.GetField(37);
            PossibleInjCnt = (int)ev.GetField(38);
            Severity = (int)ev.GetField(39);
            evStartTime = (DateTime)ev.GetField(40);
            iStartTime = Int64.Parse(evStartTime.ToString("yyyyMMddHHmmss"));
            ToStreet = (string)ev.GetField(41);
            TypeEvent = (int)ev.GetField(42);
            VecType9220 = (int)ev.GetField(43);
            VecType9227 = (int)ev.GetField(44);
            VecType9228 = (int)ev.GetField(45);
            VecType9290 = (int)ev.GetField(46);

        }

    }

    //public class EventOutputElement : TableServiceEntity, IOutputType
    public class EventEntityTuple: TableServiceEntity, IOutputType
    {
        private const string DELIMITER = "-";

         public int EventId { get; set; }
        public string Agency { get; set; }
        public string OnStreet { get; set; }
        public string FromStreet { get; set; }
        public string ToStreet { get; set; }
        public double Latitude { get; set; }
        public double Longitude { get; set; }
        public int Direction { get; set; }
        public string AdminCity { get; set; }
        public double AdminPostmile { get; set; }
        public int TypeEvent { get; set; }
        public int Severity { get; set; }
        public string Description { get; set; }
        public int AffectedLaneCnt { get; set; }
        public int AffectedLaneType { get; set; }
        public int VecType9220 { get; set; }
        public int VecType9227 { get; set; }
        public int VecType9228 { get; set; }
        public int VecType9290 { get; set; }
        public int FatalityCnt { get; set; }
        public int PossibleInjCnt { get; set; }
        private DateTime evStartTime { get; set; }
        public long iStartTime { get; set; }
        private DateTime evClearTime { get; set; }
        public long iClearTime { get; set; }
        public string IssuingUser { get; set; }
        public string ContactName { get; set; }
        public string ContactPhone { get; set; }
        public bool HighwayPatrol { get; set; }
        public bool CountyFire { get; set; }
        public bool CountySheriff { get; set; }
        public bool FireDepartment { get; set; }
        public bool Ambulance { get; set; }
        public bool Coroner { get; set; }
        public bool Mait { get; set; }
        public bool Hazmat { get; set; }
        public bool FreewayServicePatrol { get; set; }
        public bool CaltransMaintenance { get; set; }
        public bool CaltransTMT { get; set; }
        public bool CountySheriffTSB { get; set; }
        public bool Other { get; set; }
        public string OtherText { get; set; }
        public string CommentInternalContent { get; set; }
        public string CommentInternalText { get; set; }
        public string CommentExternalContent { get; set; }
        public string CommentExternalText { get; set; }
        private  DateTime ActualStartTime { get; set; }
        public long iActualStartTime { get; set; }
        private DateTime ActualEndTime { get; set; }
        public long iActualEndTime { get; set; }
        public int EventStatus { get; set; }

        public DateTime datetime;
        public long iDateTime;
       
       // public int ConfigId;

        //public EventOutputElement()
        //{
        //}


        public void Initialize(PointEvent ev)
        {
            datetime = ev.StartTime.LocalDateTime; // this is what we know as event start time for all event types (e.g. highway or arterial events or rail events)
            iDateTime =  Int64.Parse(datetime.ToString("yyyyMMddHHmmss"));
            // there are also a couple of datetime fields in "event" events.
            ActualEndTime= (DateTime) ev.GetField( 0);
            iActualEndTime= Int64.Parse(ActualEndTime.ToString("yyyyMMddHHmmss"));
            ActualStartTime = (DateTime)ev.GetField(1);
            iActualStartTime= Int64.Parse(ActualStartTime.ToString("yyyyMMddHHmmss"));
            AdminCity= (string) ev.GetField( 2);
            AdminPostmile= (double) ev.GetField( 3);
            AffectedLaneCnt= (int) ev.GetField( 4);
            AffectedLaneType= (int) ev.GetField( 5);
            Agency= (string) ev.GetField( 6);
            Ambulance= (bool) ev.GetField( 7);
            CaltransMaintenance= (bool) ev.GetField( 8);
            CaltransTMT= (bool) ev.GetField( 9);
            evClearTime= (DateTime) ev.GetField(10);
            iClearTime= Int64.Parse(evClearTime.ToString("yyyyMMddHHmmss"));
            CommentExternalContent= (string) ev.GetField(11);
            CommentExternalText= (string) ev.GetField(12);
            CommentInternalContent= (string) ev.GetField(13);
            CommentInternalText= (string) ev.GetField(14);
            ContactName= (string) ev.GetField(15);
            ContactPhone= (string) ev.GetField(16);
            Coroner= (bool) ev.GetField(17);
            CountyFire= (bool)ev.GetField(18);
            CountySheriff = (bool)ev.GetField(19);
            CountySheriffTSB = (bool)ev.GetField(20);
            Description= (string) ev.GetField(21);
            Direction= (int) ev.GetField(22);
            EventId= (int) ev.GetField(23);
            EventStatus= (int) ev.GetField(24);
            FatalityCnt= (int) ev.GetField(25);
            FireDepartment = (bool)ev.GetField(26);
            FreewayServicePatrol= (bool) ev.GetField(27);
            FromStreet= (string) ev.GetField(28);
            Hazmat= (bool) ev.GetField(29);
            HighwayPatrol= (bool) ev.GetField(30);
            IssuingUser= (string) ev.GetField(31);
            Latitude=(double) ev.GetField(32);
            Longitude= (double) ev.GetField(33);
            Mait= (bool)ev.GetField(34);
            OnStreet= (string) ev.GetField(35);
            Other= (bool)ev.GetField(36);
            OtherText= (string) ev.GetField(37);
            PossibleInjCnt= (int) ev.GetField(38);
            Severity= (int) ev.GetField(39);
            evStartTime= (DateTime) ev.GetField(40);
            iStartTime= Int64.Parse(evStartTime.ToString("yyyyMMddHHmmss"));
            try
            {
                ToStreet = (string) ev.GetField(41);
            }
            catch(Exception e)
            {
                ToStreet = "";
            }
            TypeEvent= (int) ev.GetField(42);
            VecType9220= (int) ev.GetField(43);
            VecType9227= (int) ev.GetField(44);
            VecType9228= (int) ev.GetField(45);
            VecType9290 = (int) ev.GetField(46);

            PartitionKey = CalcPartition();
            RowKey = CalcRowKey();

           
        }
        public EventEntityTuple()
            : base()
        {
           // ConfigId = BootUp.maxEventConfigID;
        }

        private string CalcPartition()
        {
            return datetime.ToString("yyyyMM") + DELIMITER + Agency + DELIMITER;//+ Type;
        }

        public static string CalcPartition(DateTime datetime, string agency, string type)
        {
            return datetime.ToString("yyyyMM") + DELIMITER + agency + DELIMITER + type;
        }

        public static string CalcRowKey(int sensID, DateTime datetime)
        {
            return sensID +  datetime.ToString("ddHHmmss");
        }

        private string CalcRowKey()
        {
            return EventId + DELIMITER + datetime.ToString("ddHHmmss");
        }
    }

    public class CmsOutputElement : IOutputType
    {

        public int Id;
        public String DeviceStatus;
        public String State;
        public String Date;
        public String Time;
        public String Phase1Line1;
        public String Phase1Line2;
        public String Phase1Line3;
        public String Phase2Line1;
        public String Phase2Line2;
        public String Phase2Line3;

        public DateTimeOffset StartTime;
        public int ConfigId;
        public String Agency;

        public void Initialize(PointEvent ev)
        {
            StartTime = ev.StartTime.LocalDateTime;
            //Date = (String)ev.GetField(0);
            Date = GetCorrectDate((String)ev.GetField(0));
            DeviceStatus = (String)ev.GetField(1);
            Id = (int)ev.GetField(2);
            Phase1Line1 = (String)ev.GetField(3);
            Phase1Line2 = (String)ev.GetField(4);
            Phase1Line3 = (String)ev.GetField(5);
            Phase2Line1 = (String)ev.GetField(6);
            Phase2Line2 = (String)ev.GetField(7);
            Phase2Line3 = (String)ev.GetField(8);
            State = (String)ev.GetField(9);
            Time = (String)ev.GetField(10);
            
            //ConfigId = BootUp.maxCmsConfigID;
        }
        public string GetCorrectDate(string dateString)
        {
            DateTime date;

            try
            {
                date = DateTime.ParseExact(dateString, "yyyymmdd", new CultureInfo("en-US"), DateTimeStyles.None);
                return dateString;
            }
            catch
            {
                return "00010101";
            }
        }
    }
}
